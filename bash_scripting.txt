Bash script adalah file teks biasa yang berisi serangkaian perintah. 
Perintah-perintah ini adalah campuran dari perintah yang biasanya kita ketik sendiri pada baris perintah (seperti ls atau cp misalnya) dan perintah yang dapat kita ketik pada baris perintah tetapi umumnya tidak. Poin penting untuk diingat adalah:

Apa pun yang dapat Anda jalankan secara normal di baris perintah dapat dimasukkan ke dalam skrip dan itu akan melakukan hal yang persis sama. Demikian pula, apa pun yang dapat Anda masukkan ke dalam skrip juga dapat dijalankan secara normal pada baris perintah dan akan melakukan hal yang persis sama.

Anda tidak perlu mengubah apapun. Cukup ketikkan perintah seperti biasa dan perintah tersebut akan berperilaku seperti biasanya. Hanya saja, alih-alih mengetiknya di baris perintah, kita sekarang memasukkannya ke dalam file teks biasa.

Ini adalah konvensi untuk memberikan file yang merupakan skrip Bash ekstensi .sh (myscript.sh misalnya). Seperti yang Anda ketahui, Linux adalah sistem tanpa ekstensi sehingga skrip tidak harus memiliki karakteristik ini agar dapat berfungsi

Dalam ranah komputer secara umum kita memiliki konsep program dan proses. Program adalah sekumpulan data biner yang terdiri dari serangkaian instruksi untuk CPU dan mungkin sumber daya lain (gambar, file suara, dan semacamnya) yang diatur ke dalam satu paket dan biasanya disimpan di hard disk Anda. Ketika kita mengatakan kita menjalankan sebuah program, kita sebenarnya tidak menjalankan program itu, tetapi salinannya yang disebut proses. Apa yang kami lakukan adalah menyalin instruksi dan sumber daya tersebut dari hard disk ke dalam memori kerja (atau RAM). Kami juga mengalokasikan sedikit ruang dalam RAM untuk proses menyimpan variabel (untuk menyimpan data kerja sementara) dan beberapa tanda untuk memungkinkan sistem operasi (OS) mengelola dan melacak proses selama eksekusinya.
 
Pada dasarnya, proses adalah contoh program yang sedang berjalan.
 
Mungkin ada beberapa proses yang mewakili program yang sama yang berjalan di memori pada waktu yang sama. Misalnya saya dapat membuka dua terminal dan menjalankan perintah cp di keduanya. Dalam hal ini akan ada dua proses cp yang saat ini ada di sistem. Setelah mereka selesai menjalankan sistem, kemudian hancurkan mereka dan tidak ada lagi proses yang mewakili program cp.

Saat kita berada di terminal, kita menjalankan proses Bash untuk memberi kita shell Bash. Jika kita memulai skrip yang sedang berjalan, itu tidak benar-benar berjalan dalam proses itu melainkan memulai proses baru untuk dijalankan di dalam,

Run the bash Script

Menjalankan bash script seperti men-execute script pada umumnya, tetapi script harus diberi izin atau anda akan diberi pesan bahwa script tsb dilarang.

Misal saya memiliki script 

#!/bin/bash
# A sample Bash script,

echo Hello World!

menjalankan script dengan

>>chmod +x hello_world.sh

>>./hello_world.sh

Dapat juga menjalankan bash script dengan 
bash myscript.sh
Hello World!


The Shebang (#!)
#! / bin / bash

Ini adalah baris pertama dari skrip di atas. Urutan karakter tanda seru (#!) Ini disebut sebagai Shebang. Mengikuti itu adalah jalur ke penerjemah (atau program) yang harus digunakan untuk menjalankan (atau menafsirkan) sisa baris dalam file teks. (Untuk skrip Bash, ini akan menjadi jalur ke Bash, tetapi ada banyak jenis skrip lainnya dan masing-masing memiliki penerjemah sendiri.)

Pemformatan penting di sini. Shebang harus berada di baris pertama file (baris 2 tidak akan berfungsi, meskipun baris pertama kosong). Juga tidak boleh ada spasi sebelum # atau di antara! dan jalan menuju penerjemah.

Variable
Variabel adalah penyimpanan sementara untuk sepotong informasi. Ada dua tindakan yang dapat kami lakukan untuk variabel:

> Menetapkan nilai untuk variabel.
> Membaca nilai variabel.

Variabel mungkin memiliki nilai yang ditetapkan dalam beberapa cara berbeda. Yang paling umum adalah menetapkan nilai secara langsung dan nilainya ditetapkan sebagai hasil pemrosesan oleh perintah atau program. Anda akan melihat contoh keduanya di bawah.

Saat merujuk atau membaca variabel, kita menempatkan tanda $ sebelum nama variabel.
Saat mengatur variabel, kita tidak menggunakan tanda $.

Variabel dapat ditempatkan di mana saja dalam skrip (atau pada baris perintah dalam hal ini) dan, ketika dijalankan, Bash akan menggantinya dengan nilai variabel. Hal ini dimungkinkan karena pergantian dilakukan sebelum perintah dijalankan.
Ada beberapa variabel lain yang disetel sistem untuk Anda gunakan juga.

$ 0 - Nama skrip Bash.
$ 1 - $ 9 - 9 argumen pertama ke skrip Bash. (Seperti disebutkan di atas.)
$ # - Berapa banyak argumen yang diteruskan ke skrip Bash.
$ @ - Semua argumen yang diberikan ke skrip Bash.
$? - Status keluar dari proses yang paling baru dijalankan.
$$ - ID proses dari skrip saat ini.
$ USER - Nama pengguna dari pengguna yang menjalankan skrip.
$ HOSTNAME - Nama host mesin tempat skrip dijalankan.
$ SECONDS - Jumlah detik sejak skrip dimulai.
$ RANDOM - Mengembalikan nomor acak berbeda setiap kali dirujuk.
$ LINENO - Mengembalikan nomor baris saat ini di skrip Bash.



$ 1, $ 2, ...
Argumen baris perintah pertama, kedua, dll ke skrip.

variabel = nilai
Untuk menetapkan nilai variabel. tidak ada spasi juga size of = 

Quotes"'
Ganda akan melakukan substitusi variabel, tunggal tidak

variable = $ (perintah)
Simpan keluaran dari sebuah perintah ke dalam sebuah variabel

export var1
Buat variabel var1 tersedia untuk proses anak.

Konsep penting
Pemformatan
Ada atau tidaknya ruang itu penting.
Pengelolaan
Jika nilai tertentu digunakan beberapa kali dalam skrip (misalnya nama file atau direktori), penggunaan variabel dapat mempermudah pengelolaan.

Input

Jika kita ingin meminta masukan dari pengguna maka kita menggunakan perintah yang disebut baca. Perintah ini mengambil input dan akan menyimpannya ke dalam variabel.

read var1

Mari kita lihat contoh sederhana:
#!/bin/bash
# Ask the user for their name
 
echo Hello, who am I talking to?
 
read varname
 
echo It\'s nice to meet you $varname
read varName
Baca masukan dari pengguna dan simpan di variabel varName.
/ dev / stdin
File yang dapat Anda baca untuk mendapatkan STDIN untuk skrip Bash

Kegunaan
Pilihan metode masukan Anda akan berdampak pada seberapa berguna skrip Anda.


Arimatika Bash

let expression
Buat variabel sama dengan ekspresi.

let <arithmetic expression>

#!/bin/bash
# Basic arithmetic using let
 
let a=5+4
echo $a # 9
 
let "a = 5 + 4"
echo $a # 9
 
let a++
echo $a # 10
 
let "a = 4 * 5"
echo $a # 20
 
let "a = $1 + 30"
echo $a # 30 + first command line argument
>>
Operator	Operation
+, -, \*, /	addition, subtraction, multiply, divide
Var++		Increase the variable var by 1
Var--		Decrease the variable var by 1
%		Modulus (Return the remainder after division)


expr expression
mencetak hasil ekspresi.

expr item1 operator item2

Let's look at a simple example:
#!/bin/bash
# Basic arithmetic using expr
 
expr 5 + 4



$(( expression ))
Return the result of the expression.
$(( expression ))

Here's an example to illustrate:
#!/bin/bash
# Basic arithmetic using double parentheses
 
a=$(( 4 + 5 ))
echo $a # 9

${#var}
Return the length of the variable var.
${#variable}

Here's an example:
#!/bin/bash
# Show the length of a variable.
 
a='Hello World'
echo ${#a} # 11
 
If Statements

Adalah sebuah statement seleksi kondisi dan perintah sesuai perintah kondisi yang diberi
If 
if [ <some test> ]
then
<commands>
Fi

Tanda kurung siku ([]) dalam pernyataan if di atas sebenarnya adalah referensi ke pengujian perintah. Ini berarti bahwa semua operator yang memungkinkan pengujian dapat digunakan di sini juga. Cari halaman manual untuk test untuk melihat semua kemungkinan operator (ada beberapa) tetapi beberapa yang lebih umum tercantum di bawah ini.

Operator			Description
! EXPRESSION		The EXPRESSION is false.
-n STRING			The length of STRING is greater than zero.
-z STRING			The lengh of STRING is zero (ie it is empty).
STRING1 = STRING2	STRING1 is equal to STRING2
STRING1 != STRING2	STRING1 is not equal to STRING2
INTEGER1 -eq INTEGER2	INTEGER1 is numerically equal to INTEGER2
INTEGER1 -gt INTEGER2	INTEGER1 is numerically greater than INTEGER2
INTEGER1 -lt INTEGER2	INTEGER1 is numerically less than INTEGER2
-d FILE			FILE exists and is a directory.
-e FILE			FILE exists.
-r FILE			FILE exists and the read permission is granted.
-s FILE			FILE exists and it's size is greater than zero (ie. it is not empty).
-w FILE			FILE exists and the write permission is granted.
-x FILE			FILE exists and the execute permission is granted

If Elif Else
if [ <some test> ]
then
<commands>
elif [ <some test> ]
then
<different commands>
else
<other commands>
Fi
Boolean Operation:
and - &&
or - ||
Case Statements

	case <variable> in
<pattern 1>)
<commands>
;;
<pattern 2>)
<other commands>
;;
Esac



Indentasi
Indentasi membuat kode Anda lebih mudah dibaca. Ini menjadi semakin penting karena skrip Bash Anda semakin panjang.

Perencanaan
Sekarang skrip Anda menjadi sedikit lebih kompleks, Anda mungkin ingin meluangkan sedikit waktu untuk memikirkan tentang bagaimana Anda menyusunnya sebelum menyelami.


Loops
	Perintah yang membuat suatu perintah berulang ulang pada saat kondisi tertentu atau sampai pada kondisi terentu

While Loops
while [ <some test> ]
do
<commands>
Done

#!/bin/bash
# Basic while loop
 
counter=1
while [ $counter -le 10 ]
do
echo $counter
((counter++))
done
 
echo All done

Until Loops
	until [ <some test> ]
do
<commands>
Done

#!/bin/bash
# Basic until loop
 
counter=1
until [ $counter -gt 10 ]
do
echo $counter
((counter++))
done
 
echo All done


For Loops 
	for var in <list>
do
<commands>
Done

#!/bin/bash
# Basic for loop
 
names='Stan Kyle Cartman'
 
for name in $names
do
echo $name
done
 
echo All done

Ranges 
We can also process a series of numbers
	#!/bin/bash
# Basic range in for loop
 
for value in {1..5}
do
echo $value
done
 
echo All done

	#!/bin/bash
# Basic range with steps for loop
 
for value in {10..0..2}
do
echo $value
done
 
echo All done

Break:
Statement that tells loop function to stop.

Continue;
Pernyataan lanjutkan memberi tahu Bash untuk berhenti menjalankan iterasi loop ini dan memulai iterasi berikutnya.




Select
Mekasnisme yang dapat untuk membuat menu system yang simple.

select var in <list>
do
<commands>
done

#!/bin/bash
# A simple menu system
 
names='Kyle Cartman Stan Quit'
 
PS3='Select character: '
 
select name in $names
do
if [ $name == 'Quit' ]
then
break
fi
echo Hello $name
done
 
echo Bye

Fungsi

function_name () {
<commands>
}

or

function function_name {
<commands>
}


Beberapa hal yang perlu diperhatikan:

-Salah satu metode di atas untuk menentukan fungsi adalah valid. Keduanya beroperasi sama dan tidak ada keuntungan atau kerugian satu sama lain. Ini benar-benar hanya preferensi pribadi.

-Dalam bahasa pemrograman lain, adalah umum untuk memiliki argumen yang diteruskan ke fungsi yang terdaftar di dalam tanda kurung (). Di Bash mereka hanya ada untuk dekorasi dan Anda tidak pernah menaruh apapun di dalamnya.

-Definisi fungsi (fungsi sebenarnya itu sendiri) harus muncul dalam skrip sebelum ada panggilan ke fungsi tersebut.

#!/bin/bash
# Basic function
 
print_something () {
echo Hello I am a function
}
 
print_something
print_something

Return Values
Adalah value yang akan disimpan atau di return pada suatu variable atau yang akan dicetak
#!/bin/bash
# Setting a return status for a function
 
print_something () {
echo Hello $1
return 5
}
 
print_something Mars
print_something Jupiter
echo The previous function has a return value of $?
Variable Scope
Scope mengacu pada bagian mana dari skrip yang dapat melihat variabel mana. Secara default, variabel bersifat global. Artinya, ini terlihat di mana-mana dalam skrip. Kami juga dapat membuat variabel sebagai variabel lokal. Saat kita membuat variabel lokal di dalam suatu fungsi, itu hanya terlihat di dalam fungsi itu. Untuk melakukan itu kami menggunakan kata kunci lokal di depan variabel saat pertama kali kami menetapkan nilainya.

local var_name=<var_value>

#!/bin/bash
# Experimenting with variable scope
 
var_change () {
local var1='local 1'
echo Inside function: var1 is $var1 : var2 is $var2
var1='changed again'
var2='2 changed again'
}
 
var1='global 1'
var2='global 2'
 
echo Before function call: var1 is $var1 : var2 is $var2
 
var_change
 
echo After function call: var1 is $var1 : var2 is $var2

Overriding Commands
dimungkinkan untuk menamai fungsi dengan nama yang sama dengan perintah yang biasanya Anda gunakan pada baris perintah. Ini memungkinkan kita membuat pembungkus. misalnya. Mungkin setiap kali kita memanggil perintah ls dalam skrip kita, yang sebenarnya kita inginkan adalah ls -lh. Kami dapat melakukan hal berikut:
#!/bin/bash
# Create a wrapper around the command ls
 
ls () {
command ls -lh
}
 
ls
User Interface

TPut
tput adalah perintah yang memungkinkan Anda mengontrol kursor pada terminal dan format konten yang dicetak. Ini adalah alat yang cukup kuat dan kompleks jadi saya akan memperkenalkan beberapa dasar-dasarnya di sini tetapi menyerahkannya kepada Anda untuk melakukan penelitian lebih lanjut.

#!/bin/bash
# Print message in center of terminal
 
cols=$( tput cols )
rows=$( tput lines )
 
message=$@
 
input_length=${#message}
 
half_input_length=$(( $input_length / 2 ))
 
middle_row=$(( $rows / 2 ))
middle_col=$(( ($cols / 2) - $half_input_length ))
 
tput clear
 
tput cup $middle_row $middle_col
tput bold
echo $@
tput sgr0
tput cup $( tput lines ) 0

Suppyling Data:
Ada 3 cara untuk memberikan data ke skrip Bash:

-Sebagai argumen baris perintah
-Diarahkan ulang sebagai STDIN
-Baca secara interaktif selama eksekusi skrip

